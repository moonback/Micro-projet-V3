-- Script de test pour le syst√®me de demandes en attente
-- Ex√©cuter apr√®s l'installation compl√®te

-- 1. V√©rifier l'existence des nouvelles tables
DO $$
DECLARE
    table_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name IN ('pending_task_requests', 'task_acceptances', 'notifications');
    
    IF table_count = 3 THEN
        RAISE NOTICE '‚úÖ Toutes les nouvelles tables sont cr√©√©es';
    ELSE
        RAISE NOTICE '‚ùå Tables manquantes. Tables trouv√©es: %', table_count;
    END IF;
END $$;

-- 2. V√©rifier l'existence des nouvelles fonctions
DO $$
DECLARE
    function_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO function_count
    FROM information_schema.routines 
    WHERE routine_schema = 'public' 
    AND routine_name IN ('request_task_approval', 'approve_task_request', 'reject_task_request', 'extend_task_request', 'cleanup_expired_requests');
    
    IF function_count = 5 THEN
        RAISE NOTICE '‚úÖ Toutes les nouvelles fonctions sont cr√©√©es';
    ELSE
        RAISE NOTICE '‚ùå Fonctions manquantes. Fonctions trouv√©es: %', function_count;
    END IF;
END $$;

-- 3. V√©rifier les politiques RLS
DO $$
DECLARE
    policy_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO policy_count
    FROM pg_policies 
    WHERE tablename = 'pending_task_requests';
    
    IF policy_count >= 3 THEN
        RAISE NOTICE '‚úÖ Politiques RLS configur√©es pour pending_task_requests';
    ELSE
        RAISE NOTICE '‚ùå Politiques RLS manquantes. Politiques trouv√©es: %', policy_count;
    END IF;
END $$;

-- 4. V√©rifier les index
DO $$
DECLARE
    index_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO index_count
    FROM pg_indexes 
    WHERE tablename = 'pending_task_requests';
    
    IF index_count >= 4 THEN
        RAISE NOTICE '‚úÖ Index cr√©√©s pour pending_task_requests';
    ELSE
        RAISE NOTICE '‚ùå Index manquants. Index trouv√©s: %', index_count;
    END IF;
END $$;

-- 5. V√©rifier la contrainte de statut des t√¢ches
DO $$
DECLARE
    constraint_exists BOOLEAN;
BEGIN
    SELECT EXISTS(
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'tasks_status_check' 
        AND table_name = 'tasks'
    ) INTO constraint_exists;
    
    IF constraint_exists THEN
        RAISE NOTICE '‚úÖ Contrainte de statut des t√¢ches mise √† jour';
    ELSE
        RAISE NOTICE '‚ùå Contrainte de statut des t√¢ches manquante';
    END IF;
END $$;

-- 6. Test de cr√©ation d'une demande en attente (n√©cessite des UUIDs valides)
-- Remplacez les UUIDs par des valeurs r√©elles de votre base
/*
-- Cr√©er une t√¢che de test
INSERT INTO tasks (id, title, description, budget, author, status)
VALUES (
    gen_random_uuid(),
    'Test Syst√®me Demandes',
    'T√¢che de test pour v√©rifier le syst√®me de demandes en attente',
    75.00,
    'VOTRE_UUID_AUTEUR', -- Remplacez par un UUID valide
    'open'
);

-- Tester la demande d'approbation
SELECT request_task_approval(
    (SELECT id FROM tasks WHERE title = 'Test Syst√®me Demandes' LIMIT 1),
    'VOTRE_UUID_HELPER', -- Remplacez par un UUID valide diff√©rent
    'Je peux vous aider avec cette t√¢che !'
);

-- V√©rifier que la t√¢che est en attente
SELECT 
    t.title,
    t.status,
    ptr.status as request_status,
    ptr.expires_at
FROM tasks t
JOIN pending_task_requests ptr ON t.id = ptr.task_id
WHERE t.title = 'Test Syst√®me Demandes';
*/

-- 7. Test de nettoyage des demandes expir√©es
DO $$
DECLARE
    expired_count INTEGER;
BEGIN
    -- Cr√©er une demande expir√©e de test
    INSERT INTO pending_task_requests (task_id, helper_id, expires_at, status)
    VALUES (
        (SELECT id FROM tasks LIMIT 1),
        (SELECT id FROM profiles LIMIT 1),
        NOW() - INTERVAL '10 minutes',
        'pending'
    );
    
    -- Ex√©cuter le nettoyage
    SELECT cleanup_expired_requests() INTO expired_count;
    
    RAISE NOTICE '‚úÖ Nettoyage des demandes expir√©es: % demandes trait√©es', expired_count;
    
    -- Nettoyer les donn√©es de test
    DELETE FROM pending_task_requests WHERE expires_at < NOW() - INTERVAL '5 minutes';
END $$;

-- 8. V√©rifier les permissions des fonctions
DO $$
DECLARE
    permission_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO permission_count
    FROM information_schema.role_routine_grants 
    WHERE routine_name IN ('request_task_approval', 'approve_task_request', 'reject_task_request', 'extend_task_request')
    AND grantee = 'authenticated';
    
    IF permission_count = 4 THEN
        RAISE NOTICE '‚úÖ Permissions accord√©es aux utilisateurs authentifi√©s';
    ELSE
        RAISE NOTICE '‚ùå Permissions manquantes. Permissions trouv√©es: %', permission_count;
    END IF;
END $$;

-- 9. V√©rifier les triggers
DO $$
DECLARE
    trigger_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO trigger_count
    FROM information_schema.triggers 
    WHERE trigger_name LIKE '%cleanup%' OR trigger_name LIKE '%updated_at%';
    
    IF trigger_count >= 3 THEN
        RAISE NOTICE '‚úÖ Triggers configur√©s';
    ELSE
        RAISE NOTICE '‚ùå Triggers manquants. Triggers trouv√©s: %', trigger_count;
    END IF;
END $$;

-- 10. R√©sum√© final
DO $$
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ TESTS TERMIN√âS !';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã V√©rifications effectu√©es :';
    RAISE NOTICE '   ‚úÖ Tables cr√©√©es';
    RAISE NOTICE '   ‚úÖ Fonctions PostgreSQL cr√©√©es';
    RAISE NOTICE '   ‚úÖ Politiques RLS configur√©es';
    RAISE NOTICE '   ‚úÖ Index cr√©√©s';
    RAISE NOTICE '   ‚úÖ Contraintes mises √† jour';
    RAISE NOTICE '   ‚úÖ Permissions accord√©es';
    RAISE NOTICE '   ‚úÖ Triggers configur√©s';
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ Votre syst√®me de demandes en attente est pr√™t !';
    RAISE NOTICE '';
    RAISE NOTICE 'üì± Prochaines √©tapes :';
    RAISE NOTICE '   1. Tester l''interface utilisateur';
    RAISE NOTICE '   2. Cr√©er une t√¢che et demander l''approbation';
    RAISE NOTICE '   3. Tester l''approbation/rejet depuis l''onglet "En Attente"';
    RAISE NOTICE '   4. V√©rifier que les t√¢ches sont gris√©es pendant l''attente';
END $$;
